#lang racket

(require parser-tools/yacc)
(require "tokenizer.rkt")
(require 
  (prefix-in : parser-tools/lex-sre))

(define jsonic-parse
  (parser
   (start start)
   (tokens op-tokens mt-tokens)
   (end EOF)
   (error
    (lambda (tok-ok? tok-name tok-value #:stack se)
      (random)))
   (grammar
    (start [() #f]
           [(jsonic-program) `((jsonic-program ,@$1))]) 
    (jsonic-program
     [(CHAR) `((jsonic-char ,$1))]
          [(CHAR jsonic-program) `(,`(jsonic-char , $1) ,@$2)]
     [(SEXP) `((jsonic-sexp ,$1))]
          [(SEXP jsonic-program) `(,`(jsonic-sexp , $1) ,@$2)]))))

(provide jsonic-parse)